<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | 赵峰的个人博客]]></title>
  <link href="http://piaoling.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://piaoling.github.io/"/>
  <updated>2014-12-30T11:58:42+08:00</updated>
  <id>http://piaoling.github.io/</id>
  <author>
    <name><![CDATA[赵峰]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Blog访问提速]]></title>
    <link href="http://piaoling.github.io/blog/2014/12/06/improve-octopress-response-time/"/>
    <updated>2014-12-06T22:13:45+08:00</updated>
    <id>http://piaoling.github.io/blog/2014/12/06/improve-octopress-response-time</id>
    <content type="html"><![CDATA[<p>github国内访问本身速度就比较慢，当访问我们的主页时也会出现各种加载中的状态。</p>

<p>国内同样也有提供类似服务的公司——gitcafe，所以将博客的内容镜像到<a href="https://gitcafe.com/">GitCafe</a>上。</p>

<h2>将blog同步部署到gitcafe上</h2>

<p>如果你还没有注册过<a href="https://gitcafe.com/">GitCafe</a>，首先需要<a href="https://gitcafe.com/signup">点这里</a>注册一下。</p>

<p>注意在gitcafe注册的用户名最好跟github一样，否则在同时向2个地方同步时会有问题，因为gitconfig中的username不一致，或者说public key中的username不一致导致不能同时传2传代码。</p>

<p>注册完成之后，去<a href="https://gitcafe.com/account/public_keys">公钥管理</a>那儿添加一下你的ssh公钥。</p>

<h4>在GitCafe上新建一个博客项目</h4>

<p>然后我们需要先在GitCafe上新建一个博客项目。具体来说，就是创建一个与用户名(如果是组织，就是组织名)相同名称的项目。如果你创建的项目名与用户名相同，GitCafe会自动识别成这是一个Page项目。</p>

<h4>设置多个Git Remote源</h4>

<p>接下来我们需要将原本提交到Github上的博客内容同步提交到GitCafe。</p>

<p>对于Octopress，我们只需要每次提交网站内容时，执行完 rake deploy之后，再执行以下脚本即可（你可以将该脚本中的代码仓库地址换成你的，然后将其保存成一个脚本文件，需要时执行一下即可）：</p>

<pre><code>cd _deploy
# 添加 gitcafe 源
git remote add gitcafe git@gitcafe.com:zhaofeng/zhaofeng.git &gt;&gt; /dev/null 2&gt;&amp;1
# 提交博客内容
echo "### Pushing to GitCafe..."
git push -u gitcafe master:gitcafe-pages
echo "### Done"%
</code></pre>

<p>大概解释一下以上内容，Octopress在发布时会将自己的<code>_delpoy</code>目录切换到master分支，然后将生成的博客内容放到<code>_delpoy</code>目录中，然后执行<code>git push</code>操作。正常情况下，默认内容是push到github上的。我们执行的以上脚本，就是为该项目增加了一个名为<code>gitcafe</code>的远程仓库，然后将master分支push到<code>gitcafe</code>的<code>gitcafe-pages</code>分支。</p>

<p>除了以上方法外，你也可以直接修改<code>Rakefile</code>。在其第269行后增加如下代码，也可以达到同样的目的，这样你每次就仍然只需要执行<code>rake deploy</code>即可同时将博客同步到github和gitcafe:</p>

<pre><code>system "git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git &gt;&gt; /dev/null 2&gt;&amp;1"
system "git push -u gitcafe master:gitcafe-pages"
</code></pre>

<p>插入代码的示例位置如下：</p>

<p><img src="./images/gitcafe-edit-rakefile.jpg" alt="gitcafe-edit-rakefile" /></p>

<p>通过修改<code>source/_includes/custom/footer.html</code>文件添加对gitcafe的感谢。</p>

<pre><code> &lt;p&gt;
&amp;copy; 2014 - 赵峰 -
&lt;span class="credit"&gt;基于 &lt;a href="http://octopress.org" target="_blank"&gt;Octopress&lt;/a&gt;&lt;/span&gt;
&lt;span class="credit"&gt;, 感谢 &lt;a href="http://gitcafe.com/signup?invited_by=tangqiaoboy" target="_blank"&gt;GitCafe&lt;/a&gt; 为本站提供存储空间&lt;/span&gt;
&lt;/p&gt;
</code></pre>

<p> 做了这么多后，再访问一下你的主页你会发现——还是慢</p>

<h2>解决访问还是慢的问题</h2>

<p>很喜欢池老师的这篇<a href="http://macshuo.com/?p=1234">《冰封四海》</a>
，虽然池老师用的wordpress，但是我们慢的原理是一样的。</p>

<p>所以借用来2行命令：</p>

<pre><code>grep "ajax.googleapis.com" ~/Octorpress/* -R | cut -f 1 -d ":" | uniq | xargs sudo sed -i 's/ajax.googleapis.com/ajax.useso.com/g'

grep "fonts.googleapis.com" ~/Octorpress/* -R | cut -f 1 -d ":" | uniq | xargs sudo sed -i 's/fonts.googleapis.com/fonts.useso.com/g'
</code></pre>

<p>执行的话，会发现sed语句会报错，没看出什么毛病，可能Mac上有一些参数不一样吧。只执行grep把包含问题资源的文件就都能找出来了，会发现其实并不多。我是一个一个手动替换的，注意deploy目录下不需要替换因为它是动态生成的。</p>

<pre><code>grep "ajax.googleapis.com" ~/Octorpress/* -R
</code></pre>

<p>改过后再次<code>rake generate</code>, <code>rake deploy</code>后再访问你的网页，怎么样快到闪瞎眼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac搭建Octopress博客（一）]]></title>
    <link href="http://piaoling.github.io/blog/2014/11/30/first-article/"/>
    <updated>2014-11-30T20:52:17+08:00</updated>
    <id>http://piaoling.github.io/blog/2014/11/30/first-article</id>
    <content type="html"><![CDATA[<p>先思考一个问题，你为什么要搭Octopress？</p>

<p>如果只是为了记录日常生活，或者是给自己在网上安个家没事写写人生感悟，那么请转向<a href="http://blog.sina.com.cn">新浪博客</a>，<a href="http://blog.163.com">网易博客</a>等各大门户网站。
当然估计抱着这样目的的人也不会知道Octopress，我相信看到这篇文章的99%是个程序员。</p>

<h2>前言</h2>

<p>继续阅读前请确认你有以下概念（不需要很会，但至少要听说过）：</p>

<ol>
<li> git : 至少要有版本管理的概念，最好了解基本的git命令，例如pull, push等</li>
<li> github : 有自己的账户，并上传过项目，知道什么是public key</li>
<li> linux bash : 知道什么是命令行，懂一些基本命令：ls, cd, grep, sed等，知道PATH的作用</li>
</ol>


<p>本文的环境：Macbook pro，OS X Yosemite(10.10版本)，Xcode 6.1，git</p>

<p>PS:rubyer如果不是来光临指导的，请不要往下看了。</p>

<h2>目录</h2>

<ul>
<li>Mac上的包管理工具——Homebrew</li>
<li>安装ruby</li>
<li>安装Octopress</li>
<li>配置Octopress——hello world</li>
<li>将blog部署到github上</li>
</ul>


<h2>Mac上的包管理工具-Homebrew</h2>

<p>程序员的Mac环境配置和打造绝对值得写写，这也将是我下一篇文章的内容。
这里只说包管理工具。
都知道redhat上有yum，ubuntu上有apt-get，Mac上的Homebrew也越来越被熟知。</p>

<p>在安装 Homebrew 之前，需要将 Xcode Command Line Tools 安装完成，这样你就可以使用基于 Xcode Command Line Tools 编译的 Homebrew。</p>

<p>在 terminal 中复制以下命令（不包括 $），跟随指引，将完成 Hombrew 安装。</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>

<p>紧接着，我们需要做一件事让通过 Hombrew 安装的程序的启动链接 (在 /usr/local/bin中）可以直接运行，无需将完整路径写出。通过以下命令将 /usr/local/bin 添加至 $PATH 环境变量中:</p>

<pre><code>$ echo 'export PATH="/usr/local/bin:$PATH"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>Cmd+T 打开一个新的 terminal 标签页，运行以下命令，确保 brew 运行正常。</p>

<pre><code>$ brew doctor
</code></pre>

<p>安装完成后，Homwbrew 会将本地 /usr/local 初始化为 git 的工作树，并将目录所有者变更为当前所操作的用户，将来 brew 的相关操作不需要 sudo 。</p>

<h3>Homebrew 基本使用</h3>

<p>安装一个包，可以简单的运行</p>

<pre><code>$ brew install &lt;package_name&gt;
</code></pre>

<p>更新 Homebrew 在服务器端上的包目录：</p>

<pre><code>$ brew update
</code></pre>

<p>查看你的包是否需要更新：</p>

<pre><code>$ brew outdated
</code></pre>

<p>更新包：</p>

<pre><code>$ brew upgrade &lt;package_name&gt;
</code></pre>

<p>Homebrew 将会把老版本的包缓存下来，以便当你想回滚至旧版本时使用。但这是比较少使用的情况，当你想清理旧版本的包缓存时，可以运行:</p>

<pre><code>$ brew cleanup
</code></pre>

<p>查看你安装过的包列表（包括版本号）：</p>

<pre><code>$ brew list --versions
</code></pre>

<h2>安装Ruby和rbenv</h2>

<p>在终端输入<code>ruby --version</code> 会返回你当前的ruby版本，请确保你的ruby版本>1.9.3 最好是2.1（因为我是2.0，装的时候遇到问题后又升到了2.1）</p>

<p>安装Ruby有2中方式，<a href="http://octopress.org/docs/setup/rbenv/">rbenv</a> 或 <a href="http://octopress.org/docs/setup/rvm/">RVM</a>，
我们需要安装rbenv。终端输入：</p>

<pre><code>brew update
brew install rbenv
brew install ruby-build
</code></pre>

<p>如果你机器上的ruby已经满足版本要求直接阅读安装Octopress，否则可以参照如下安装ruby。</p>

<pre><code>rbenv install 1.9.3-p0
rbenv local 1.9.3-p0
rbenv rehash
</code></pre>

<h2>安装Octopress</h2>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p>安装依赖</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>PS:我在bundle install时遇到了2个大麻烦，现在回忆不起来了，其中一个是因为我安装了2个xcode，第二个xcode 2的目录中有个空格导致Makefile生成的环境错误。解决的办法是要用xcode-select 命令修改 the path of the active developer directory.
具体方式请<code>xcode-select -h</code> 或者把你的xcode全部卸载，重装吧。</p>

<p>最后安装Octopress</p>

<pre><code>rake install
</code></pre>

<h2>配置Octopress——hello world</h2>

<p>基础配置参考：<a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html</a></p>

<ul>
<li>rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake watch 检测文件变化，实时生成新内容(可选)</li>
<li>rake preview 在本机4000端口生成访问内容（可选）
 或者访问localhost:4000</li>
<li>rake deploy 发布文件</li>
</ul>


<p>注意先不要运行<code>rake deploy</code>， 因为这之前你要先绑定一次github</p>

<h2>将blog部署到github上</h2>

<p>登陆www.github.com,并创建一个名为username.github.io的代码仓库。这里注意username必须是和你的账号名一致。</p>

<p>其实这个就是github的pages服务，然后在终端进入到Octopress目录，第一次发布在执行<code>rake deploy</code>前要执行<code>rake setup_github_pages</code>来绑定github仓库。在输入提示中输入你的github-pages地址。例如：
<code>git@github.com:username/username.github.io.git</code></p>

<p>现在运行rake deploy发布你的第一篇blog吧。然后访问username.github.io即可看到你的blog了。通常第一次要等的久一些，所以你如果看到的是404页面不好灰心。</p>

<p>像我这种手贱的，立刻就google了，说可以手动刷新一下，在github的设置页面里生成一个默认页面然后立刻就能刷出github-pages页面。但是不是我们上传的Octopress页面。当你再次<code>rake deploy</code>时出现git仓库内容不匹配的错误。</p>

<pre><code>cd _deploy
git pull origin master
</code></pre>

<p>如果有冲突自己把冲突解了吧。然后在<code>rake deploy</code>就可以了</p>

<p>PS: 文章是markdown格式的，推荐一个<a href="http://macdown.uranusjr.com/">Mac上markdown编辑工具</a></p>
]]></content>
  </entry>
  
</feed>
